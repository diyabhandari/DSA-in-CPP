/*
Given collection of candidate numbers (candidates) and a integer target.Find all unique combinations in candidates where the sum is equal to the target.There can only be one usage of each number in the candidates combination and return the answer in sorted order.

e.g : The combination [1, 1, 2] and [1, 2, 1] are not unique.
*/
#include <bits/stdc++.h>
using namespace std;
class Solution {
private:
    void findCombinations(int index, vector<int>& candidates, int target, vector<vector<int>>& result, vector<int>& subsequence){
        if(target == 0){ //valid subsequence found
            result.push_back(subsequence);
            return;
        }
        else if(index == candidates.size() || target < 0){
            return;
        }
        subsequence.push_back(candidates[index]); //including the current element
        findCombinations(index+1, candidates, target - candidates[index], result, subsequence);
        subsequence.pop_back(); //backtrack
        for(int i = index+1; i < candidates.size(); i++){
            if(candidates[i] != candidates[index]){ //if we are not taking the element at index, we want to make sure we are not taking the same element at index+1
                findCombinations(i, candidates, target, result, subsequence); //not including current element
                //will call it from the index 'i' where there is not a duplicate element
                break; //else this loop will continue when control returns here after recursive call
            }
        }
    }
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target){
        vector<vector<int>> result;
        vector<int> subsequence; //passing this by reference saved the last test case from TLE
        sort(candidates.begin(),candidates.end());
        findCombinations(0, candidates, target, result,subsequence);
        return result;    
    }
};